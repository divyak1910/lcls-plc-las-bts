<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="PRG_VALVES" Id="{ba00eb5d-cf41-4398-aa63-3ea5e5b61133}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_VALVES
VAR
    Valve_opn_ok : BOOL; 
	pumpON :BOOL; 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Switchbox valves *)
fb_PP_VGC(
    i_stUSG := fb_PP_GCC.IG,
    i_stDSG := fb_DP_GCC.IG,
    i_xDis_DPIlk := FALSE,
    i_xEPS_OK := TRUE,
    i_xPMPS_OK := TRUE,
    i_xExt_OK := TRUE,
    i_xOverrideMode := xSystemOverrideMode_BTS,
    io_fbFFHWO := g_FFOut,
    fbArbiter := g_fbArbiter
);

fb_PP_VVC(
    i_xExtILK_OK := fb_PP_VGC.M_IsClosed(),
    i_xOverrideMode := xSystemOverrideMode_BTS
);

GVL_BTS_VAC.fb_PP_VRC_1(
    i_xExtILK_OK := TRUE,
    i_xOverrideMode := xSystemOverrideMode_BTS
);

GVL_BTS_VAC.fb_PP_VRC_2(
    i_xExtILK_OK := TRUE,
    i_xOverrideMode := xSystemOverrideMode_BTS
);

fb_VP_VVC_1(
    i_xExtILK_OK := TRUE,
    i_xOverrideMode := xSystemOverrideMode_BTS
);

fb_VP_VVC_2(
    i_xExtILK_OK := TRUE
);

// Vent manifold valve - interlock logic with slow or fast vent
IF (fb_PP_PMF.q_stPump.eState <> E_PumpState.pumpSTOPPED)  THEN  // Condition to evaluate if Roughing Pump is ON
    fb_VP_VVC_4.i_xExtILK_OK := FALSE;
    fb_VP_VVC_2.i_xExtILK_OK := FALSE;
    fb_VP_VVC_1.i_xExtILK_OK := FALSE;
ELSE
    fb_VP_VVC_4.i_xExtILK_OK := TRUE;
    fb_VP_VVC_2.i_xExtILK_OK := TRUE;
    fb_VP_VVC_1.i_xExtILK_OK := TRUE;
        IF (fb_VP_VVC_2.iq_stValve.q_xOPN_DO OR fb_VP_VVC_1.iq_stValve.q_xOPN_DO) THEN
            fb_VP_VVC_4.M_Set_OPN_SW(TRUE);
        ELSE
            fb_VP_VVC_4.M_Set_OPN_SW(FALSE);
        END_IF
END_IF

fb_VP_VVC_4(
    i_xOverrideMode := xSystemOverrideMode_BTS
);

// Turbo Isolation valve - Interlocked with turbo pump operation

// Pump must be running to allow the valve to open
pumpON := fb_PP_PMF.q_stPump.xAtSpd;

//Roughing Pump function block
fb_PP_VRC_4(
    i_xExtILK_OK := pumpON,
    i_xOverrideMode := xSystemOverrideMode_BTS
);

//Condition to open or close
IF (fb_PP_PMF.q_stPump.xAtSpd = TRUE OR fb_PP_PMF.q_stPump.i_xIsRun = TRUE) THEN 
	fb_PP_VRC_4.iq_stValve.q_xOPN_DO := TRUE; 
ELSE
	fb_PP_VRC_4.iq_stValve.q_xOPN_DO :=FALSE; 
END_IF

(* Transport Tube vavles *)
// LS1
fb_LS1_VGC(
    i_stUSG := fb_LS1_GCC.IG,
    i_stDSG := fb_DP_GCC.IG,
    i_xDis_DPIlk := FALSE,
    i_xEPS_OK := TRUE,
    i_xPMPS_OK := TRUE,
    i_xExt_OK := TRUE,
    i_xOverrideMode := xSystemOverrideMode_BTS,
    io_fbFFHWO := g_FFOut,
    fbArbiter := g_fbArbiter,
);

// LS5
fb_LS5_VGC(
    i_stUSG := fb_LS5_GPI.PG,
    i_stDSG := fb_DP_GPI.PG,
    i_xDis_DPIlk := FALSE,
    i_xEPS_OK := TRUE,
    i_xPMPS_OK := TRUE,
    i_xExt_OK := TRUE,
    i_xOverrideMode := xSystemOverrideMode_BTS,
    io_fbFFHWO := g_FFOut,
    fbArbiter := g_fbArbiter
);

// LS8
fb_LS8_VGC(
    i_stUSG := fb_LS8_GCC.IG,
    i_stDSG := fb_DP_GCC.IG,
    i_xDis_DPIlk := FALSE,
    i_xEPS_OK := TRUE,
    i_xPMPS_OK := TRUE,
    i_xExt_OK := TRUE,
    i_xOverrideMode := xSystemOverrideMode_BTS,
    io_fbFFHWO := g_FFOut,
    fbArbiter := g_fbArbiter
);

// LD2
fb_LD2_VGC(
    i_stUSG := fb_LD2_GCC.IG,
    i_stDSG := fb_DP_GCC.IG,
    i_xDis_DPIlk := FALSE,
    i_xEPS_OK := TRUE,
    i_xPMPS_OK := TRUE,
    i_xExt_OK := TRUE,
    i_xOverrideMode := xSystemOverrideMode_BTS,
    io_fbFFHWO := g_FFOut,
    fbArbiter := g_fbArbiter
);

// LD4
fb_LD4_VGC(
    i_stUSG := fb_LD4_GCC.IG,
    i_stDSG := fb_DP_GCC.IG,
    i_xDis_DPIlk := FALSE,
    i_xEPS_OK := TRUE,
    i_xPMPS_OK := TRUE,
    i_xExt_OK := TRUE,
    i_xOverrideMode := xSystemOverrideMode_BTS,
    io_fbFFHWO := g_FFOut,
    fbArbiter := g_fbArbiter
);

// LD6
fb_LD6_VGC(
    i_stUSG := fb_LD6_GCC.IG,
    i_stDSG := fb_DP_GCC.IG,
    i_xDis_DPIlk := FALSE,
    i_xEPS_OK := TRUE,
    i_xPMPS_OK := TRUE,
    i_xExt_OK := TRUE,
    i_xOverrideMode := xSystemOverrideMode_BTS,
    io_fbFFHWO := g_FFOut,
    fbArbiter := g_fbArbiter
);

// LD8
fb_LD8_VGC(
    i_stUSG := fb_LD8_GCC.IG,
    i_stDSG := fb_DP_GCC.IG,
    i_xDis_DPIlk := FALSE,
    i_xEPS_OK := TRUE,
    i_xPMPS_OK := TRUE,
    i_xExt_OK := TRUE,
    i_xOverrideMode := xSystemOverrideMode_BTS,
    io_fbFFHWO := g_FFOut,
    fbArbiter := g_fbArbiter
);

// LD9
fb_LD9_VGC(
    i_stUSG := fb_LD9_GCC.IG,
    i_stDSG := fb_DP_GCC.IG,
    i_xDis_DPIlk := FALSE,
    i_xEPS_OK := TRUE,
    i_xPMPS_OK := TRUE,
    i_xExt_OK := TRUE,
    i_xOverrideMode := xSystemOverrideMode_BTS,
    io_fbFFHWO := g_FFOut,
    fbArbiter := g_fbArbiter
);

// LD10
fb_LD10_VGC(
    i_stUSG := fb_LD10_GCC.IG,
    i_stDSG := fb_DP_GCC.IG,
    i_xDis_DPIlk := FALSE,
    i_xEPS_OK := TRUE,
    i_xPMPS_OK := TRUE,
    i_xExt_OK := TRUE,
    i_xOverrideMode := xSystemOverrideMode_BTS,
    io_fbFFHWO := g_FFOut,
    fbArbiter := g_fbArbiter
);

// LD14
fb_LD14_VGC(
    i_stUSG := fb_LD14_GCC.IG,
    i_stDSG := fb_DP_GCC.IG,
    i_xDis_DPIlk := FALSE,
    i_xEPS_OK := TRUE,
    i_xPMPS_OK := TRUE,
    i_xExt_OK := TRUE,
    i_xOverrideMode := xSystemOverrideMode_BTS,
    io_fbFFHWO := g_FFOut,
    fbArbiter := g_fbArbiter
);


//// LS3
fb_LS3_VGC(
    i_stUSG := fb_LS3_GPI.PG,
    i_stDSG := fb_DP_GPI.PG,
    i_xDis_DPIlk := FALSE,
    i_xEPS_OK := TRUE,
    i_xPMPS_OK := TRUE,
    i_xExt_OK := TRUE,
    i_xOverrideMode := xSystemOverrideMode_BTS,
    io_fbFFHWO := g_FFOut,
    fbArbiter := g_fbArbiter
);

// LS4
fb_LS4_VGC(
    i_stUSG := fb_LS4_GPI.PG,
    i_stDSG := fb_DP_GPI.PG,
    i_xDis_DPIlk := FALSE,
    i_xEPS_OK := TRUE,
    i_xPMPS_OK := TRUE,
    i_xExt_OK := TRUE,
    i_xOverrideMode := xSystemOverrideMode_BTS,
    io_fbFFHWO := g_FFOut,
    fbArbiter := g_fbArbiter
);

// LS6
fb_LS6_VGC(
    i_stUSG := fb_LS6_GPI.PG,
    i_stDSG := fb_DP_GPI.PG,
    i_xDis_DPIlk := FALSE,
    i_xEPS_OK := TRUE,
    i_xPMPS_OK := TRUE,
    i_xExt_OK := TRUE,
    i_xOverrideMode := xSystemOverrideMode_BTS,
    io_fbFFHWO := g_FFOut,
    fbArbiter := g_fbArbiter
);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>