<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_EpicsStatsMonitor" Id="{f6189eab-0a14-4059-9efd-caffaccf73fa}" SpecialFunc="None">
    <Declaration><![CDATA[(*
    EPICS AreaDetector Stats Plugin Monitor

    Requires a "link" pragma to specify the full plugin prefix.

*)
FUNCTION_BLOCK FB_EpicsStatsMonitor
VAR_INPUT
    fMaximumFrameTime : LREAL := 0.2;
    (* Minimum change in pixels to be considered a new frame, using pixel sum (total) as a metric *)
    fMinPixelSumChange : LREAL := 1E-6;
    bEnable : BOOL := TRUE;
END_VAR
VAR_OUTPUT
    {attribute 'pytmc' := '
        pv: IsUpdating
        io: input
    '}
    bIsUpdating : BOOL;
    {attribute 'pytmc' := '
        pv: CentroidX
        io: input
    '}
    fCentroidX : LREAL;
    {attribute 'pytmc' := '
        pv: CentroidY
        io: input
    '}
    fCentroidY : LREAL;
    {attribute 'pytmc' := '
        pv: Total
        io: input
        field: DESC Sum of all elements in the image
    '}
    fTotal : LREAL;
    {attribute 'pytmc' := '
        pv: ArrayCount
        io: input
    '}
    nArrayCount : UDINT;
    bValid : BOOL;
    {attribute 'pytmc' := '
        pv: FrameTime
        io: input
        field: DESC Avg time between frame updates
        field: EGU sec
    '}
    fFrameTime : LREAL;
END_VAR
VAR
    (* The previous frame times, used for averaging *)
    fFrameTimes : ARRAY [1..nFrameArraySize] OF LREAL;
    bFrameTimeValid : ARRAY [1..nFrameArraySize] OF BOOL;
    nFrameIndex : UINT;

    {attribute 'pytmc' := '
        pv: CX_
        link: CentroidX_RBV
    '}
    fbCentroidX : FB_LREALFromEPICS;

    {attribute 'pytmc' := '
        pv: CY_
        link: CentroidY_RBV
    '}
    fbCentroidY : FB_LREALFromEPICS;

    {attribute 'pytmc' := '
        pv: Total_
        link: Total_RBV
    '}
    fbTotal : FB_LREALFromEPICS;

    fLastCentroidX : LREAL;
    fLastCentroidY : LREAL;

    {attribute 'pytmc' := '
        pv: Cnt_
        link: ArrayCounter_RBV
    '}
    fbArrayCounter : FB_LREALFromEPICS;

    // Last array count value
    nLastArrayCount : UDINT;
    fLastTotal : LREAL;
    fInternalMaximumFrameTime : LREAL;
    nIdx : UINT;

    // Time of the last frame update
    tLastUpdate: TIME;
    tSinceLastFrame : TIME;
    tMaximumFrameTime : TIME;

    tonLastGoodFrame : TON;

    bInit : BOOL;
    // Did we see a frame update yet? (FALSE at startup; TRUE after first frame.)
    bSawFrame : BOOL;
    // Do we have a new frame? Has the array count updated, and position change above fNewFrameMinimumChange?
    {attribute 'pytmc' := 'pv: HaveNewFrame; io: i'}
    bHaveNewFrame : BOOL;
    // For this new frame, is it above the threshold fNewFrameMinimumChange?
    {attribute 'pytmc' := 'pv: AboveThreshold; io: i'}
    bAboveThreshold : BOOL;

    tCheckFrame : TON;

END_VAR
VAR CONSTANT
    nFrameArraySize : UINT := 10;
    fInvalidFrameTime : LREAL := 0.0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bEnable THEN
    bValid := FALSE;
    RETURN;
END_IF

IF NOT bInit THEN
    bInit := TRUE;
    fLastTotal := 0;
    bSawFrame := FALSE;
    tLastUpdate := TIME();
END_IF

fbCentroidX();
fbCentroidY();
fbTotal();
fbArrayCounter();

bValid := (
    fbTotal.bValid AND
    fbCentroidX.bValid AND
    fbCentroidY.bValid AND
    fbArrayCounter.bValid
);

fCentroidX := fbCentroidX.fValue;
fCentroidY := fbCentroidY.fValue;
fTotal := fbTotal.fValue;
nArrayCount := LREAL_TO_UDINT(fbArrayCounter.fValue);

tonLastGoodFrame.PT := T#60S;
tonLastGoodFrame(IN:=TRUE);

IF ABS(fTotal - fLastTotal) >= fMinPixelSumChange AND fMinPixelSumChange > 0.0 THEN

    fFrameTime := TIME_TO_LREAL(tonLastGoodFrame.ET) * 0.001; // ms to seconds

    tonLastGoodFrame(IN:=FALSE);
    tonLastGoodFrame(IN:=TRUE);
    bSawFrame := TRUE;

    fLastTotal := fTotal;
    fLastCentroidX := fCentroidX;
    fLastCentroidY := fCentroidY;
    nLastArrayCount := nArrayCount;

ELSIF TIME_TO_LREAL(tonLastGoodFrame.ET) * 0.001 > fMaximumFrameTime THEN
    fFrameTime := TIME_TO_LREAL(tonLastGoodFrame.ET) * 0.001; // ms to seconds
END_IF

bIsUpdating := bSawFrame AND (fFrameTime < fMaximumFrameTime);]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>