<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_Test_EpicsCentroidMonitor" Id="{f2b9a982-0418-41c7-aafe-94902ffcfe9d}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'call_after_init'}
FUNCTION_BLOCK FB_Test_EpicsCentroidMonitor EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestBasics();]]></ST>
    </Implementation>
    <Method Name="TestBasics" Id="{2953f222-cbed-4db0-9aaa-214604e5b113}">
      <Declaration><![CDATA[METHOD TestBasics
VAR_INPUT
END_VAR
VAR_INST
    fbMonitor : FB_EpicsStatsMonitor;
    nCount : INT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Updating_OK');

fbMonitor.nMaxDroppedFrames := 2;
fbMonitor.fMaximumFrameTime := 10.0;
fbMonitor.fMinPixelSumChange := 0.5;

WriteCentroidValue(fbMonitor:=fbMonitor, tLastUpdate:=T#0S, fX:=0.0, fY:=0.0, fTotal:=0.0, nCount:=nCount, nX_Severity:=0, nY_Severity:=0, nCount_Severity:=0, nTotal_Severity:=0);
fbMonitor();

WriteCentroidValue(fbMonitor:=fbMonitor, tLastUpdate:=T#1S, fX:=0.1, fY:=0.1, fTotal:=1.0, nCount:=nCount, nX_Severity:=0, nY_Severity:=0, nCount_Severity:=0, nTotal_Severity:=0);
fbMonitor();

WriteCentroidValue(fbMonitor:=fbMonitor, tLastUpdate:=T#2S, fX:=0.1, fY:=0.1, fTotal:=2.0, nCount:=nCount, nX_Severity:=0, nY_Severity:=0, nCount_Severity:=0, nTotal_Severity:=0);
fbMonitor();

AssertTrue(fbMonitor.bIsUpdating, Message:='Centroid not reporting updating');
AssertEquals_LREAL(fbMonitor.fFrameTime, 1.5, 1E-6, Message:='Update time inaccurate');
AssertEquals_LREAL(fbMonitor.fFrameTimes[1], 1.0, 1E-6, Message:='Update time inaccurate');
AssertEquals_LREAL(fbMonitor.fFrameTimes[2], 2.0, 1E-6, Message:='Update time inaccurate');

WriteCentroidValue(fbMonitor:=fbMonitor, tLastUpdate:=T#2S, fX:=0.1, fY:=0.1, fTotal:=3.0, nCount:=nCount, nX_Severity:=0, nY_Severity:=0, nCount_Severity:=0, nTotal_Severity:=0);
fbMonitor();

AssertEquals_LREAL(fbMonitor.fFrameTimes[1], 2.0, 1E-6, Message:='Update time inaccurate');
AssertEquals_LREAL(fbMonitor.fFrameTimes[2], 2.0, 1E-6, Message:='Update time inaccurate');

TEST_FINISHED();

(*
TEST('Updating_Not_OK');

fbMonitor.Initialize();

fbMonitor.nMaxDroppedFrames := 2;
fbMonitor.fMaximumFrameTime := 10.0;
fbMonitor.fMinPixelSumChange := 0.5;

WriteCentroidValue(fbMonitor:=fbMonitor, tLastUpdate:=T#0S, fX:=0.0, fY:=0.0, fTotal:=0.0, nCount:=nCount, nX_Severity:=0, nY_Severity:=0, nCount_Severity:=0, nTotal_Severity:=0);
fbMonitor();

WriteCentroidValue(fbMonitor:=fbMonitor, tLastUpdate:=T#11S, fX:=0.1, fY:=0.1, fTotal:=0.0, nCount:=nCount, nX_Severity:=0, nY_Severity:=0, nCount_Severity:=0, nTotal_Severity:=0);
fbMonitor();

WriteCentroidValue(fbMonitor:=fbMonitor, tLastUpdate:=T#11S, fX:=0.1, fY:=0.1, fTotal:=0.0, nCount:=nCount, nX_Severity:=0, nY_Severity:=0, nCount_Severity:=0, nTotal_Severity:=0);
fbMonitor();

AssertFalse(fbMonitor.bIsUpdating, Message:='Centroid not updating');
AssertEquals_LREAL(fbMonitor.fFrameTime, fbMonitor.fMaximumFrameTime, 1E-6, Message:='Update time inaccurate');
AssertEquals_LREAL(fbMonitor.fFrameTimes[1], fbMonitor.fMaximumFrameTime, 1E-6, Message:='Update time inaccurate');
AssertEquals_LREAL(fbMonitor.fFrameTimes[2], fbMonitor.fMaximumFrameTime, 1E-6, Message:='Update time inaccurate');

TEST_FINISHED();

// TODO: how to make that timer trigger?
*)

TEST('Severity invalidation');

WriteCentroidValue(fbMonitor:=fbMonitor, fX:=0.0, fY:=0.0, fTotal:=0.0, nCount:=nCount, nX_Severity:=2, nY_Severity:=0, nCount_Severity:=0, nTotal_Severity:=0, tLastUpdate:=T#0.2S);
fbMonitor(fMinPixelSumChange:=0.0);
AssertFalse(fbMonitor.bValid, Message:='Invalid data - x severity');

WriteCentroidValue(fbMonitor:=fbMonitor, fX:=0.1, fY:=0.1, fTotal:=0.0, nCount:=nCount, nX_Severity:=0, nY_Severity:=2, nCount_Severity:=0, nTotal_Severity:=0, tLastUpdate:=T#0.2S);
fbMonitor(fMinPixelSumChange:=0.0);
AssertFalse(fbMonitor.bValid, Message:='Invalid data - y severity');

WriteCentroidValue(fbMonitor:=fbMonitor, fX:=0.2, fY:=0.2, fTotal:=0.0, nCount:=nCount, nX_Severity:=0, nY_Severity:=0, nCount_Severity:=2, nTotal_Severity:=0, tLastUpdate:=T#0.2S);
fbMonitor(fMinPixelSumChange:=0.0);
AssertFalse(fbMonitor.bValid, Message:='Invalid data - count severity');

WriteCentroidValue(fbMonitor:=fbMonitor, fX:=0.2, fY:=0.2, fTotal:=0.0, nCount:=nCount, nX_Severity:=0, nY_Severity:=0, nCount_Severity:=0, nTotal_Severity:=2, tLastUpdate:=T#0.2S);
fbMonitor(fMinPixelSumChange:=0.0);
AssertFalse(fbMonitor.bValid, Message:='Invalid data - total severity');

WriteCentroidValue(fbMonitor:=fbMonitor, fX:=0.0, fY:=0.0, fTotal:=fbMonitor.fMinPixelSumChange, nCount:=nCount, nX_Severity:=0, nY_Severity:=0, nCount_Severity:=0, nTotal_Severity:=0, tLastUpdate:=T#0.1S);
fbMonitor(fMinPixelSumChange:=0.0);
AssertTrue(fbMonitor.bValid, Message:='Data valid');
AssertTrue(fbMonitor.bIsUpdating, Message:='Data valid and updating');

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="WriteCentroidValue" Id="{4e3dbc52-94e8-4849-bc38-c135e919c1aa}">
      <Declaration><![CDATA[METHOD WriteCentroidValue
VAR_IN_OUT
    fbMonitor : FB_EpicsStatsMonitor;
END_VAR
VAR_INPUT
    fX : LREAL;
    fY : LREAL;
    fTotal : LREAL;
    nCount : INT;
    nX_Severity : INT := 0;
    nY_Severity : INT := 0;
    nCount_Severity : INT := 0;
    nTotal_Severity : INT := 0;
    tLastUpdate : TIME;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[WRITE_PROTECTED_INT(ADR(fbMonitor.fbCentroidX.iPLCInternalSeverity), nX_Severity);
WRITE_PROTECTED_INT(ADR(fbMonitor.fbCentroidY.iPLCInternalSeverity), nY_Severity);
WRITE_PROTECTED_INT(ADR(fbMonitor.fbArrayCounter.iPLCInternalSeverity), nCount_Severity);
WRITE_PROTECTED_INT(ADR(fbMonitor.fbTotal.iPLCInternalSeverity), nTotal_Severity);

WRITE_PROTECTED_LREAL(ADR(fbMonitor.fbCentroidX.fPLCInternalValue), fX);
WRITE_PROTECTED_LREAL(ADR(fbMonitor.fbCentroidY.fPLCInternalValue), fY);
WRITE_PROTECTED_LREAL(ADR(fbMonitor.fbTotal.fPLCInternalValue), fTotal);
WRITE_PROTECTED_LREAL(ADR(fbMonitor.fbArrayCounter.fPLCInternalValue), INT_TO_LREAL(nCount));

WRITE_PROTECTED_TIME(ADR(fbMonitor.tLastUpdate), TIME() - tLastUpdate);
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>